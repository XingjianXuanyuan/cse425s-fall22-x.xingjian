Score: 0.00
only_capitals: Tried to make: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.]into only capitals, should have gotten: [Cabbages,Kings.] but didn't. [Fail exception thrown]
only_capitals: Tried to make: [this,list,has,no,capital,letters]into only capitals, should have gotten: [] but didn't. [Fail exception thrown]
only_capitals: Tried to make: []into only capitals, should have gotten: [] but didn't. [Fail exception thrown]
only_capitals: didn't use required function List.filter [Fail exception thrown]
only_capitals: didn't use required function Char.isUpper [Fail exception thrown]
only_capitals: didn't use required function String.sub [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[Variable "x",Variable "x"], should have gotten: false but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[Variable "x",ConstructorP ("wild",Wildcard)], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Variable "x"], should have gotten: false but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Wildcard], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Wildcard],Variable "x"], should have gotten: false but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: ConstructorP ("egg",ConstructorP ("egg",ConstP 4)), should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[Wildcard,Wildcard], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[ConstP 4,Wildcard,Variable "ba",TupleP[Variable "ab"]], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]], should have gotten: true but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: ConstructorP ("hi",TupleP[Variable "x",Variable "x"]), should have gotten: false but your function returned otherwise. [Fail exception thrown]
check_pat: Called check_pat on input: ConstructorP ("hi",TupleP[Variable "x",ConstructorP ("yo",TupleP[Variable "x",UnitP])]), should have gotten: false but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Const 17,ConstP 17), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Unit,Wildcard), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Constructor ("egg",Const 4),ConstructorP ("egg",ConstP 4)), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Constructor ("egg",Constructor ("egg",Const 4)),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4)),Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],Tuple[Unit,Unit],Tuple[Const 17,Const 4],Tuple[Constructor ("egg",Const 4),Constructor ("egg",Const 4)]],TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]]), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Const 17,ConstP 4), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Unit,ConstP 17), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Constructor ("egg",Constructor ("egg",Const 4)),ConstructorP ("egg",ConstP 4)), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],TupleP[Wildcard,Wildcard]), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Unit,TupleP[]), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
match: Called match on input: (Const 17,ConstructorP ("egg",ConstP 4)), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
first_match: Called first_match on input: (Const 17,[Wildcard,ConstP 17]), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
first_match: Called first_match on input: (Const 17,[ConstP 17,Wildcard]), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
first_match: Called first_match on input: (Constructor ("egg",Const 4),[ConstructorP ("egg",ConstP 4)]), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
first_match: Called first_match on input: (Constructor ("egg",Const 4),[ConstP 4]), should have gotten: NONE but your function returned otherwise. [Fail exception thrown]
first_match: Called first_match on input: (Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4)),Tuple[Const 17,Unit,Const 4,Constructor ("egg",Const 4),Constructor ("egg",Constructor ("egg",Const 4))],Tuple[Unit,Unit],Tuple[Const 17,Const 4],Tuple[Constructor ("egg",Const 4),Constructor ("egg",Const 4)]],[ConstP 17,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)],TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4)),TupleP[ConstP 17,Wildcard,ConstP 4,ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstructorP ("egg",ConstP 4))],TupleP[Wildcard,Wildcard],TupleP[ConstP 17,ConstP 4],TupleP[ConstructorP ("egg",ConstP 4),ConstructorP ("egg",ConstP 4)]]]), should have gotten: SOME([]) but your function returned otherwise. [Fail exception thrown]
typecheck_patterns: Your function fails when the first argument is an empty list and the pattern list is TupleT [UnitT,UnitT,UnitT]. [Fail exception thrown]
typecheck_patterns: Your function fails when the first argument is an empty list and the pattern list is [Wildcard, ConstP 17,ConstP 4]. [Fail exception thrown]
typecheck_patterns: Your function fails when there is no typ that all the patterns in the list can have. [Fail exception thrown]
typecheck_patterns: Your function fails when there is no typ that all the patterns in the list can have. [Fail exception thrown]
typecheck_patterns: Your function fails when the list is consists of 2 TUples and a Const. [Fail exception thrown]
typecheck_patterns: Your function fails when a type in first argument matches with one in the pattern list. [Fail exception thrown]
typecheck_patterns: Your function fails when there is no typ that all the patterns in the list can have due to a constructor given an argument with wrong type [Fail exception thrown]
typecheck_patterns: Your function fails when there is no typ that all the patterns in the list [UnitP, ConstP 5] can have [Fail exception thrown]
typecheck_patterns: Your function fails when a pattern list with a 2-tuple of variables, and 2-tuple of wildcards should have type TupleT [Anything, Anything] [Fail exception thrown]
typecheck_patterns: Your function fails when there is no typ that can be assigned to a list containing tuples of differing lengths [Fail exception thrown]
typecheck_patterns: Your function fails when  there is no typ that all the patterns in the list can have. [Fail exception thrown]
longest_string1: Tried to get the longest string from: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: carpenter but got something else. [Fail exception thrown]
longest_string1: Tried to get the longest string from: [], should have gotten:  but got something else. [Fail exception thrown]
longest_string1: Tried to get the longest string from: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ but got something else. [Fail exception thrown]
longest_string2: Tried to get the longest string from: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: carpenter but got something else. [Fail exception thrown]
longest_string2: Tried to get the longest string from: [this,list,has,no,capital,letters], should have gotten: letters but got something else. [Fail exception thrown]
longest_string2: Tried to get the longest string from: [Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,NorthCarolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,southCarolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming], should have gotten: West Virginia but got something else. [Fail exception thrown]
longest_string2: Tried to get the longest string from: [], should have gotten:  but got something else. [Fail exception thrown]
longest_string2: Tried to get the longest string from: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ but got something else. [Fail exception thrown]
longest_string_helper: Tried to get the longest string from: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: carpenter but got something else. [Fail exception thrown]
longest_string_helper: Tried to get the longest string from: [this,list,has,no,capital,letters], should have gotten: capital but got something else. [Fail exception thrown]
longest_string_helper: Tried to get the longest string from: [Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,NorthCarolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,southCarolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming], should have gotten: massachusetts but got something else. [Fail exception thrown]
longest_string_helper: Tried to get the longest string from: [], should have gotten:  but got something else. [Fail exception thrown]
longest_string_helper: Tried to get the longest string from: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ but got something else. [Fail exception thrown]
longest_string3/4: Tried to get the longest string from: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: carpenter(strict inequality) or carpenter(weak inequality) but got something else. [Fail exception thrown]
longest_string3/4: Tried to get the longest string from: [this,list,has,no,capital,letters], should have gotten: capital(strict inequality) or letters(weak inequality) but got something else. [Fail exception thrown]
longest_string3/4: Tried to get the longest string from: [Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,NorthCarolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,southCarolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming], should have gotten: massachusetts(strict inequality) or West Virginia(weak inequality) but got something else. [Fail exception thrown]
longest_string3/4: Tried to get the longest string from: [], should have gotten: (strict inequality) or (weak inequality) but got something else. [Fail exception thrown]
longest_string3/4: Tried to get the longest string from: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~(strict inequality) or "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~(weak inequality) but got something else. [Fail exception thrown]
longest_string1: didn't use required function foldl [Fail exception thrown]
longest_string1: didn't use required function String.size [Fail exception thrown]
prob5 tests failed to run (most likely caused by an incorrect function signature in the submission)
rev_string: Tried to reverse the string: "#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~, should have gotten: ~}|{zyxwvutsrqponmlkjihgfedcba`_^]\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#" but your function returned something else [Fail exception thrown]
rev_string: Tried to reverse the string: racecar, should have gotten: racecar but your function returned something else [Fail exception thrown]
rev_string: Tried to reverse the string: a man, a plan, a canal, panama, should have gotten: amanap ,lanac a ,nalp a ,nam a but your function returned something else [Fail exception thrown]
rev_string: Tried to reverse the string: palindromes are overrated, should have gotten: detarrevo era semordnilap but your function returned something else [Fail exception thrown]
rev_string: Tried to reverse the string: , should have gotten:  but your function returned something else [Fail exception thrown]
rev_string: you didn't use required operator o [Fail exception thrown]
rev_string: you didn't use required function rev [Fail exception thrown]
rev_string: you didn't use required function String.implode [Fail exception thrown]
rev_string: you didn't use required function String.explode [Fail exception thrown]
prob7 tests failed to run (most likely caused by an incorrect function signature in the submission)
all_answers: Called all_answers on: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: NONE but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [this,list,has,no,capital,letters], should have gotten: NONE but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,NorthCarolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,southCarolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming], should have gotten: NONE but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [], should have gotten: SOME([]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: SOME([\",#,$,%,&,',(,),*,+,,,-,.,/,0,1,2,3,4,5,6,7,8,9,:,;,<,=,>,?,@,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,[,\\,],^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},~]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [the,walrus,and,the,carpenter,talked,of,many,things,,of,shoes,and,ships,and,ceiling,wax,,of,Cabbages,and,Kings.], should have gotten: SOME([K,i,n,g,s,.,a,n,d,C,a,b,b,a,g,e,s,o,f,w,a,x,,,c,e,i,l,i,n,g,a,n,d,s,h,i,p,s,a,n,d,s,h,o,e,s,o,f,t,h,i,n,g,s,,,m,a,n,y,o,f,t,a,l,k,e,d,c,a,r,p,e,n,t,e,r,t,h,e,a,n,d,w,a,l,r,u,s,t,h,e]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [this,list,has,no,capital,letters], should have gotten: SOME([l,e,t,t,e,r,s,c,a,p,i,t,a,l,n,o,h,a,s,l,i,s,t,t,h,i,s]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [Alabama,Alaska,Arizona,Arkansas,California,Colorado,Connecticut,Delaware,Florida,Georgia,Hawaii,Idaho,Illinois,Indiana,Iowa,Kansas,Kentucky,Louisiana,Maine,Maryland,massachusetts,Michigan,Minnesota,Mississippi,Missouri,Montana,Nebraska,Nevada,New Hampshire,New Jersey,New Mexico,New York,NorthCarolina,North Dakota,Ohio,Oklahoma,Oregon,Pennsylvania,Rhode Island,southCarolina,South Dakota,Tennessee,Texas,Utah,Vermont,Virginia,Washington,West Virginia,Wisconsin,Wyoming], should have gotten: SOME([W,y,o,m,i,n,g,W,i,s,c,o,n,s,i,n,W,e,s,t, ,V,i,r,g,i,n,i,a,W,a,s,h,i,n,g,t,o,n,V,i,r,g,i,n,i,a,V,e,r,m,o,n,t,U,t,a,h,T,e,x,a,s,T,e,n,n,e,s,s,e,e,S,o,u,t,h, ,D,a,k,o,t,a,s,o,u,t,h,C,a,r,o,l,i,n,a,R,h,o,d,e, ,I,s,l,a,n,d,P,e,n,n,s,y,l,v,a,n,i,a,O,r,e,g,o,n,O,k,l,a,h,o,m,a,O,h,i,o,N,o,r,t,h, ,D,a,k,o,t,a,N,o,r,t,h,C,a,r,o,l,i,n,a,N,e,w, ,Y,o,r,k,N,e,w, ,M,e,x,i,c,o,N,e,w, ,J,e,r,s,e,y,N,e,w, ,H,a,m,p,s,h,i,r,e,N,e,v,a,d,a,N,e,b,r,a,s,k,a,M,o,n,t,a,n,a,M,i,s,s,o,u,r,i,M,i,s,s,i,s,s,i,p,p,i,M,i,n,n,e,s,o,t,a,M,i,c,h,i,g,a,n,m,a,s,s,a,c,h,u,s,e,t,t,s,M,a,r,y,l,a,n,d,M,a,i,n,e,L,o,u,i,s,i,a,n,a,K,e,n,t,u,c,k,y,K,a,n,s,a,s,I,o,w,a,I,n,d,i,a,n,a,I,l,l,i,n,o,i,s,I,d,a,h,o,H,a,w,a,i,i,G,e,o,r,g,i,a,F,l,o,r,i,d,a,D,e,l,a,w,a,r,e,C,o,n,n,e,c,t,i,c,u,t,C,o,l,o,r,a,d,o,C,a,l,i,f,o,r,n,i,a,A,r,k,a,n,s,a,s,A,r,i,z,o,n,a,A,l,a,s,k,a,A,l,a,b,a,m,a]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: [], should have gotten: SOME([]) but your function returned something else [Fail exception thrown]
all_answers: Called all_answers on: ["#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~], should have gotten: SOME([\",#,$,%,&,',(,),*,+,,,-,.,/,0,1,2,3,4,5,6,7,8,9,:,;,<,=,>,?,@,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,[,\\,],^,_,`,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,{,|,},~]) but your function returned something else [Fail exception thrown]
count_wildcards: Called count_wildcards on input: Wildcard, should have gotten: 1 but your function returned otherwise. [Fail exception thrown]
count_wildcards: Called count_wildcards on input: ConstP 17, should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_wildcards: Called count_wildcards on input: ConstructorP ("wild",Wildcard), should have gotten: 1 but your function returned otherwise. [Fail exception thrown]
count_wildcards: Called count_wildcards on input: TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)], should have gotten: 2 but your function returned otherwise. [Fail exception thrown]
count_wildcards: Called count_wildcards on input: TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard),TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)]], should have gotten: 4 but your function returned otherwise. [Fail exception thrown]
count_wild_and_variable_lengths: Called count_wild_and_variable_lengths on input: Wildcard, should have gotten: 1 but your function returned otherwise. [Fail exception thrown]
count_wild_and_variable_lengths: Called count_wild_and_variable_lengths on input: ConstP 17, should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_wild_and_variable_lengths: Called count_wild_and_variable_lengths on input: ConstructorP ("wild",Wildcard), should have gotten: 1 but your function returned otherwise. [Fail exception thrown]
count_wild_and_variable_lengths: Called count_wild_and_variable_lengths on input: TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)], should have gotten: 3 but your function returned otherwise. [Fail exception thrown]
count_wild_and_variable_lengths: Called count_wild_and_variable_lengths on input: TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard),TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)]], should have gotten: 6 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (wild,ConstructorP ("wild",Wildcard)), should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (x,Variable "x"), should have gotten: 1 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (y,Variable "x"), should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (x,TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard),TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)]]), should have gotten: 2 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (y,TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard),TupleP[Wildcard,ConstP 17,Variable "x",UnitP,TupleP[UnitP,UnitP,UnitP],ConstructorP ("",UnitP),TupleP[],ConstructorP ("wild",Wildcard)]]), should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (x,TupleP[TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Wildcard],Variable "x"]), should have gotten: 2 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (y,TupleP[TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Wildcard],Variable "x"]), should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (wild,TupleP[TupleP[TupleP[Variable "x",ConstructorP ("wild",Wildcard)],Wildcard],Variable "x"]), should have gotten: 0 but your function returned otherwise. [Fail exception thrown]
count_some_var: Called count_some_var on input: (x,TupleP[Variable "x",Variable "x"]), should have gotten: 2 but your function returned otherwise. [Fail exception thrown]

